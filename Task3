from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def get_shape(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def get_shape(self):
        return 3.14 * (self.radius ** 2) 


class Square(Shape):
    def __init__(self, a):
        self.a = a
    def get_shape(self):
        return self.a ** 2

class Triangle(Shape):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    def get_shape(self):
        return self.a + self.b + self.c

class SnapeFactory:
    @staticmethod
    def create_user(user_type):
        if user_type == "круг":
            return Circle(int(input()))
        elif user_type == "квадрат":
            return Square(int(input()))
        elif user_type == "треугольник":
            return Triangle(int(input()), int(input()), int(input()))
        else:
            raise ValueError("Неизвестный тип пользователя")

if __name__ == "__main__":
    shape1 = SnapeFactory.create_user("квадрат")
    print(shape1.get_shape())

    shape2 = SnapeFactory.create_user("круг")
    print(shape2.get_shape())
