from abc import ABC, abstractmethod

class Snape(ABC):
    @abstractmethod
    def get_role(self):
        pass

class circle(Snape):
    def __init__(self, radius):
        self.radius = radius

    def get_role(self):
        return (3.14 * (self.radius ** 2))


class square(Snape):
    def __init__(self, a):
        self.a = a
    def get_role(self):
        return self.a ** 2

class triangle(Snape):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    def get_role(self):
        return self.a + self.b + self.c

class SnapeFactory:
    @staticmethod
    def create_user(user_type):
        if user_type == "круг":
            return circle(int(input()))
        elif user_type == "квадрат":
            return square(int(input()))
        elif user_type == "треугольник":
            return triangle(int(input()), int(input()), int(input()))
        else:
            raise ValueError("Неизвестный тип пользователя")

if __name__ == "__main__":
    snape1 = SnapeFactory.create_user("квадрат")
    print(snape1.get_role())  

    snape2 = SnapeFactory.create_user("круг")
    print(snape2.get_role())  
